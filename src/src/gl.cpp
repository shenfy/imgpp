#include <imgpp/gl.hpp>

namespace {
using namespace imgpp::gl;
static const FormatDesc DESCS[] = {
  {INTERNAL_RG4_EXT, EXTERNAL_RG, TYPE_UINT8_RG4_REV_GTC},                   //FORMAT_R4G4_UNORM,
  {INTERNAL_RGBA4, EXTERNAL_RGBA, TYPE_UINT16_RGBA4_REV},                    //FORMAT_RGBA4_UNORM,
  {INTERNAL_R5G6B5, EXTERNAL_RGB, TYPE_UINT16_R5G6B5_REV},                   //FORMAT_R5G6B5_UNORM,
  {INTERNAL_RGB5A1, EXTERNAL_RGBA, TYPE_UINT16_RGB5A1_REV},                  //FORMAT_RGB5A1_UNORM,

  {INTERNAL_R8_UNORM, EXTERNAL_RED, TYPE_U8},          //FORMAT_R8_UNORM,
  {INTERNAL_R8_SNORM, EXTERNAL_RED, TYPE_I8},          //FORMAT_R8_SNORM,
  {INTERNAL_R8U, EXTERNAL_RED_INTEGER, TYPE_U8},       //FORMAT_R8_UINT,
  {INTERNAL_R8I, EXTERNAL_RED_INTEGER, TYPE_I8},       //FORMAT_R8_SINT,
  {INTERNAL_SR8, EXTERNAL_RED, TYPE_U8},           //FORMAT_R8_SRGB,

  {INTERNAL_RG8_UNORM, EXTERNAL_RG, TYPE_U8},          //FORMAT_RG8_UNORM,
  {INTERNAL_RG8_SNORM, EXTERNAL_RG, TYPE_I8},          //FORMAT_RG8_SNORM,
  {INTERNAL_RG8U, EXTERNAL_RG_INTEGER, TYPE_U8},       //FORMAT_RG8_UINT,
  {INTERNAL_RG8I, EXTERNAL_RG_INTEGER, TYPE_I8},       //FORMAT_RG8_SINT,
  {INTERNAL_SRG8, EXTERNAL_RG, TYPE_U8},           //FORMAT_RG8_SRGB,

  {INTERNAL_RGB8_UNORM, EXTERNAL_RGB, TYPE_U8},        //FORMAT_RGB8_UNORM,
  {INTERNAL_RGB8_SNORM, EXTERNAL_RGB, TYPE_I8},        //FORMAT_RGB8_SNORM,
  {INTERNAL_RGB8U, EXTERNAL_RGB_INTEGER, TYPE_U8},       //FORMAT_RGB8_UINT,
  {INTERNAL_RGB8I, EXTERNAL_RGB_INTEGER, TYPE_I8},       //FORMAT_RGB8_SINT,
  {INTERNAL_SRGB8, EXTERNAL_RGB, TYPE_U8},          //FORMAT_RGB8_SRGB,

  {INTERNAL_RGBA8_UNORM, EXTERNAL_RGBA, TYPE_U8},        //FORMAT_RGBA8_UNORM_PACK8,
  {INTERNAL_RGBA8_SNORM, EXTERNAL_RGBA, TYPE_I8},        //FORMAT_RGBA8_SNORM_PACK8,
  {INTERNAL_RGBA8U, EXTERNAL_RGBA_INTEGER, TYPE_U8},     //FORMAT_RGBA8_UINT_PACK8,
  {INTERNAL_RGBA8I, EXTERNAL_RGBA_INTEGER, TYPE_I8},     //FORMAT_RGBA8_SINT_PACK8,
  {INTERNAL_SRGB8_ALPHA8, EXTERNAL_RGBA, TYPE_U8},      //FORMAT_RGBA8_SRGB_PACK8,

  {INTERNAL_RGB10A2_UNORM, EXTERNAL_RGBA, TYPE_UINT32_RGB10A2_REV},      //FORMAT_RGB10A2_UNORM_PACK32,
  {INTERNAL_RGB10A2_SNORM_EXT, EXTERNAL_RGBA, TYPE_UINT32_RGB10A2_REV},    //FORMAT_RGB10A2_SNORM_PACK32,
  {INTERNAL_RGB10A2U, EXTERNAL_RGBA_INTEGER, TYPE_UINT32_RGB10A2_REV},     //FORMAT_RGB10A2_UINT_PACK32,
  {INTERNAL_RGB10A2I_EXT, EXTERNAL_RGBA_INTEGER, TYPE_UINT32_RGB10A2_REV},   //FORMAT_RGB10A2_SINT_PACK32,

  {INTERNAL_R16_UNORM, EXTERNAL_RED, TYPE_U16},          //FORMAT_R16_UNORM_PACK16,
  {INTERNAL_R16_SNORM, EXTERNAL_RED, TYPE_I16},          //FORMAT_R16_SNORM_PACK16,
  {INTERNAL_R16U, EXTERNAL_RED_INTEGER, TYPE_U16},         //FORMAT_R16_UINT_PACK16,
  {INTERNAL_R16I, EXTERNAL_RED_INTEGER, TYPE_I16},         //FORMAT_R16_SINT_PACK16,
  {INTERNAL_R16F, EXTERNAL_RED, TYPE_F16},              //FORMAT_R16_SFLOAT_PACK16,

  {INTERNAL_RG16_UNORM, EXTERNAL_RG, TYPE_U16},          //FORMAT_RG16_UNORM_PACK16,
  {INTERNAL_RG16_SNORM, EXTERNAL_RG, TYPE_I16},          //FORMAT_RG16_SNORM_PACK16,
  {INTERNAL_RG16U, EXTERNAL_RG_INTEGER, TYPE_U16},         //FORMAT_RG16_UINT_PACK16,
  {INTERNAL_RG16I, EXTERNAL_RG_INTEGER, TYPE_I16},         //FORMAT_RG16_SINT_PACK16,
  {INTERNAL_RG16F, EXTERNAL_RG, TYPE_F16},              //FORMAT_RG16_SFLOAT_PACK16,

  {INTERNAL_RGB16_UNORM, EXTERNAL_RGB, TYPE_U16},          //FORMAT_RGB16_UNORM_PACK16,
  {INTERNAL_RGB16_SNORM, EXTERNAL_RGB, TYPE_I16},          //FORMAT_RGB16_SNORM_PACK16,
  {INTERNAL_RGB16U, EXTERNAL_RGB_INTEGER, TYPE_U16},       //FORMAT_RGB16_UINT_PACK16,
  {INTERNAL_RGB16I, EXTERNAL_RGB_INTEGER, TYPE_I16},       //FORMAT_RGB16_SINT_PACK16,
  {INTERNAL_RGB16F, EXTERNAL_RGB, TYPE_F16},            //FORMAT_RGB16_SFLOAT_PACK16,

  {INTERNAL_RGBA16_UNORM, EXTERNAL_RGBA, TYPE_U16},        //FORMAT_RGBA16_UNORM_PACK16,
  {INTERNAL_RGBA16_SNORM, EXTERNAL_RGBA, TYPE_I16},        //FORMAT_RGBA16_SNORM_PACK16,
  {INTERNAL_RGBA16U, EXTERNAL_RGBA_INTEGER, TYPE_U16},       //FORMAT_RGBA16_UINT_PACK16,
  {INTERNAL_RGBA16I, EXTERNAL_RGBA_INTEGER, TYPE_I16},       //FORMAT_RGBA16_SINT_PACK16,
  {INTERNAL_RGBA16F, EXTERNAL_RGBA, TYPE_F16},            //FORMAT_RGBA16_SFLOAT_PACK16,

  {INTERNAL_R32U, EXTERNAL_RED_INTEGER, TYPE_U32},         //FORMAT_R32_UINT_PACK32,
  {INTERNAL_R32I, EXTERNAL_RED_INTEGER, TYPE_I32},         //FORMAT_R32_SINT_PACK32,
  {INTERNAL_R32F, EXTERNAL_RED, TYPE_F32},             //FORMAT_R32_SFLOAT_PACK32,

  {INTERNAL_RG32U, EXTERNAL_RG_INTEGER, TYPE_U32},         //FORMAT_RG32_UINT_PACK32,
  {INTERNAL_RG32I, EXTERNAL_RG_INTEGER, TYPE_I32},         //FORMAT_RG32_SINT_PACK32,
  {INTERNAL_RG32F, EXTERNAL_RG, TYPE_F32},             //FORMAT_RG32_SFLOAT_PACK32,

  {INTERNAL_RGB32U, EXTERNAL_RGB_INTEGER, TYPE_U32},       //FORMAT_RGB32_UINT_PACK32,
  {INTERNAL_RGB32I, EXTERNAL_RGB_INTEGER, TYPE_I32},       //FORMAT_RGB32_SINT_PACK32,
  {INTERNAL_RGB32F, EXTERNAL_RGB, TYPE_F32},           //FORMAT_RGB32_SFLOAT_PACK32,

  {INTERNAL_RGBA32U, EXTERNAL_RGBA_INTEGER, TYPE_U32},       //FORMAT_RGBA32_UINT_PACK32,
  {INTERNAL_RGBA32I, EXTERNAL_RGBA_INTEGER, TYPE_I32},       //FORMAT_RGBA32_SINT_PACK32,
  {INTERNAL_RGBA32F, EXTERNAL_RGBA, TYPE_F32},           //FORMAT_RGBA32_SFLOAT_PACK32,

  {INTERNAL_R64F_EXT, EXTERNAL_RED, TYPE_U64},           //FORMAT_R64_UINT_PACK64,
  {INTERNAL_R64F_EXT, EXTERNAL_RED, TYPE_I64},           //FORMAT_R64_SINT_PACK64,
  {INTERNAL_R64F_EXT, EXTERNAL_RED, TYPE_F64},           //FORMAT_R64_SFLOAT_PACK64,

  {INTERNAL_RG64F_EXT, EXTERNAL_RG, TYPE_U64},           //FORMAT_RG64_UINT_PACK64,
  {INTERNAL_RG64F_EXT, EXTERNAL_RG, TYPE_I64},           //FORMAT_RG64_SINT_PACK64,
  {INTERNAL_RG64F_EXT, EXTERNAL_RG, TYPE_F64},           //FORMAT_RG64_SFLOAT_PACK64,

  {INTERNAL_RGB64F_EXT, EXTERNAL_RGB, TYPE_U64},         //FORMAT_RGB64_UINT_PACK64,
  {INTERNAL_RGB64F_EXT, EXTERNAL_RGB, TYPE_I64},         //FORMAT_RGB64_SINT_PACK64,
  {INTERNAL_RGB64F_EXT, EXTERNAL_RGB, TYPE_F64},         //FORMAT_RGB64_SFLOAT_PACK64,

  {INTERNAL_RGBA64F_EXT, EXTERNAL_RGBA, TYPE_U64},         //FORMAT_RGBA64_UINT_PACK64,
  {INTERNAL_RGBA64F_EXT, EXTERNAL_RGBA, TYPE_I64},         //FORMAT_RGBA64_SINT_PACK64,
  {INTERNAL_RGBA64F_EXT, EXTERNAL_RGBA, TYPE_F64},         //FORMAT_RGBA64_SFLOAT_PACK64,

  {INTERNAL_RGB_DXT1, EXTERNAL_NONE, TYPE_NONE},         //FORMAT_RGB_DXT1_UNORM_BLOCK8,
  {INTERNAL_SRGB_DXT1, EXTERNAL_NONE, TYPE_NONE},          //FORMAT_RGB_DXT1_SRGB_BLOCK8,
  {INTERNAL_RGBA_DXT1, EXTERNAL_NONE, TYPE_NONE},          //FORMAT_RGBA_DXT1_UNORM_BLOCK8,
  {INTERNAL_SRGB_ALPHA_DXT1, EXTERNAL_NONE, TYPE_NONE},      //FORMAT_RGBA_DXT1_SRGB_BLOCK8,
  {INTERNAL_RGBA_DXT3, EXTERNAL_NONE, TYPE_NONE},          //FORMAT_RGBA_DXT3_UNORM_BLOCK16,
  {INTERNAL_SRGB_ALPHA_DXT3, EXTERNAL_NONE, TYPE_NONE},      //FORMAT_RGBA_DXT3_SRGB_BLOCK16,
  {INTERNAL_RGBA_DXT5, EXTERNAL_NONE, TYPE_NONE},          //FORMAT_RGBA_DXT5_UNORM_BLOCK16,
  {INTERNAL_SRGB_ALPHA_DXT5, EXTERNAL_NONE, TYPE_NONE},      //FORMAT_RGBA_DXT5_SRGB_BLOCK16,
  {INTERNAL_R_ATI1N_UNORM, EXTERNAL_NONE, TYPE_NONE},        //FORMAT_R_ATI1N_UNORM_BLOCK8,
  {INTERNAL_R_ATI1N_SNORM, EXTERNAL_NONE, TYPE_NONE},        //FORMAT_R_ATI1N_SNORM_BLOCK8,
  {INTERNAL_RG_ATI2N_UNORM, EXTERNAL_NONE, TYPE_NONE},       //FORMAT_RG_ATI2N_UNORM_BLOCK16,
  {INTERNAL_RG_ATI2N_SNORM, EXTERNAL_NONE, TYPE_NONE},       //FORMAT_RG_ATI2N_SNORM_BLOCK16,
  {INTERNAL_RGB_BP_UNSIGNED_FLOAT, EXTERNAL_NONE, TYPE_NONE},    //FORMAT_RGB_BP_UFLOAT_BLOCK16,
  {INTERNAL_RGB_BP_SIGNED_FLOAT, EXTERNAL_NONE, TYPE_NONE},    //FORMAT_RGB_BP_SFLOAT_BLOCK16,
  {INTERNAL_RGB_BP_UNORM, EXTERNAL_NONE, TYPE_NONE},       //FORMAT_RGB_BP_UNORM,
  {INTERNAL_SRGB_BP_UNORM, EXTERNAL_NONE, TYPE_NONE},        //FORMAT_RGB_BP_SRGB,

  {INTERNAL_RGB_ETC, EXTERNAL_NONE, TYPE_NONE},              //FORMAT_RGB_ETC2_UNORM_BLOCK8,
  {INTERNAL_SRGB8_ETC2, EXTERNAL_NONE, TYPE_NONE},           //FORMAT_RGB_ETC2_SRGB_BLOCK8,
  {INTERNAL_RGBA_PUNCHTHROUGH_ETC2, EXTERNAL_NONE, TYPE_NONE},     //FORMAT_RGBA_ETC2_PUNCHTHROUGH_UNORM,
  {INTERNAL_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2, EXTERNAL_NONE, TYPE_NONE}, //FORMAT_RGBA_ETC2_PUNCHTHROUGH_SRGB,
  {INTERNAL_RGBA_ETC2, EXTERNAL_NONE, TYPE_NONE},            //FORMAT_RGBA_ETC2_UNORM_BLOCK16,
  {INTERNAL_SRGB8_ALPHA8_ETC2_EAC, EXTERNAL_NONE, TYPE_NONE},      //FORMAT_RGBA_ETC2_SRGB_BLOCK16,
  {INTERNAL_R11_EAC, EXTERNAL_NONE, TYPE_NONE},            //FORMAT_R11_EAC_UNORM,
  {INTERNAL_SIGNED_R11_EAC, EXTERNAL_NONE, TYPE_NONE},         //FORMAT_R11_EAC_SNORM,
  {INTERNAL_RG11_EAC, EXTERNAL_NONE, TYPE_NONE},           //FORMAT_RG11_EAC_UNORM,
  {INTERNAL_SIGNED_RG11_EAC, EXTERNAL_NONE, TYPE_NONE},        //FORMAT_RG11_EAC_SNORM,

  {INTERNAL_RGBA_ASTC_4x4, EXTERNAL_NONE, TYPE_NONE},            //FORMAT_RGBA_ASTC4X4_UNORM,
  {INTERNAL_SRGB8_ALPHA8_ASTC_4x4, EXTERNAL_NONE, TYPE_NONE},        //FORMAT_RGBA_ASTC4X4_SRGB,
  {INTERNAL_RGBA_ASTC_5x4, EXTERNAL_NONE, TYPE_NONE},            //FORMAT_RGBA_ASTC5X4_UNORM,
  {INTERNAL_SRGB8_ALPHA8_ASTC_5x4, EXTERNAL_NONE, TYPE_NONE},        //FORMAT_RGBA_ASTC5X4_SRGB,
  {INTERNAL_RGBA_ASTC_5x5, EXTERNAL_NONE, TYPE_NONE},            //FORMAT_RGBA_ASTC5X5_UNORM,
  {INTERNAL_SRGB8_ALPHA8_ASTC_5x5, EXTERNAL_NONE, TYPE_NONE},        //FORMAT_RGBA_ASTC5X5_SRGB,
  {INTERNAL_RGBA_ASTC_6x5, EXTERNAL_NONE, TYPE_NONE},            //FORMAT_RGBA_ASTC6X5_UNORM,
  {INTERNAL_SRGB8_ALPHA8_ASTC_6x5, EXTERNAL_NONE, TYPE_NONE},        //FORMAT_RGBA_ASTC6X5_SRGB,
  {INTERNAL_RGBA_ASTC_6x6, EXTERNAL_NONE, TYPE_NONE},            //FORMAT_RGBA_ASTC6X6_UNORM,
  {INTERNAL_SRGB8_ALPHA8_ASTC_6x6, EXTERNAL_NONE, TYPE_NONE},        //FORMAT_RGBA_ASTC6X6_SRGB,
  {INTERNAL_RGBA_ASTC_8x5, EXTERNAL_NONE, TYPE_NONE},            //FORMAT_RGBA_ASTC8X5_UNORM,
  {INTERNAL_SRGB8_ALPHA8_ASTC_8x5, EXTERNAL_NONE, TYPE_NONE},        //FORMAT_RGBA_ASTC8X5_SRGB,
  {INTERNAL_RGBA_ASTC_8x6, EXTERNAL_NONE, TYPE_NONE},            //FORMAT_RGBA_ASTC8X6_UNORM,
  {INTERNAL_SRGB8_ALPHA8_ASTC_8x6, EXTERNAL_NONE, TYPE_NONE},        //FORMAT_RGBA_ASTC8X6_SRGB,
  {INTERNAL_RGBA_ASTC_8x8, EXTERNAL_NONE, TYPE_NONE},            //FORMAT_RGBA_ASTC8X8_UNORM,
  {INTERNAL_SRGB8_ALPHA8_ASTC_8x8, EXTERNAL_NONE, TYPE_NONE},        //FORMAT_RGBA_ASTC8X8_SRGB,
  {INTERNAL_RGBA_ASTC_10x5, EXTERNAL_NONE, TYPE_NONE},           //FORMAT_RGBA_ASTC10X5_UNORM,
  {INTERNAL_SRGB8_ALPHA8_ASTC_10x5, EXTERNAL_NONE, TYPE_NONE},       //FORMAT_RGBA_ASTC10X5_SRGB,
  {INTERNAL_RGBA_ASTC_10x6, EXTERNAL_NONE, TYPE_NONE},           //FORMAT_RGBA_ASTC10X6_UNORM,
  {INTERNAL_SRGB8_ALPHA8_ASTC_10x6, EXTERNAL_NONE, TYPE_NONE},       //FORMAT_RGBA_ASTC10X6_SRGB,
  {INTERNAL_RGBA_ASTC_10x8, EXTERNAL_NONE, TYPE_NONE},           //FORMAT_RGBA_ASTC10X8_UNORM,
  {INTERNAL_SRGB8_ALPHA8_ASTC_10x8, EXTERNAL_NONE, TYPE_NONE},       //FORMAT_RGBA_ASTC10X8_SRGB,
  {INTERNAL_RGBA_ASTC_10x10, EXTERNAL_NONE, TYPE_NONE},          //FORMAT_RGBA_ASTC10X10_UNORM,
  {INTERNAL_SRGB8_ALPHA8_ASTC_10x10, EXTERNAL_NONE, TYPE_NONE},      //FORMAT_RGBA_ASTC10X10_SRGB,
  {INTERNAL_RGBA_ASTC_12x10, EXTERNAL_NONE, TYPE_NONE},          //FORMAT_RGBA_ASTC12X10_UNORM,
  {INTERNAL_SRGB8_ALPHA8_ASTC_12x10, EXTERNAL_NONE, TYPE_NONE},      //FORMAT_RGBA_ASTC12X10_SRGB,
  {INTERNAL_RGBA_ASTC_12x12, EXTERNAL_NONE, TYPE_NONE},          //FORMAT_RGBA_ASTC12X12_UNORM,
  {INTERNAL_SRGB8_ALPHA8_ASTC_12x12, EXTERNAL_NONE, TYPE_NONE},      //FORMAT_RGBA_ASTC12X12_SRGB,

  {INTERNAL_RGB_PVRTC_4BPPV1, EXTERNAL_NONE, TYPE_NONE},         //FORMAT_RGB_PVRTC1_8X8_UNORM_BLOCK32,
  {INTERNAL_SRGB_PVRTC_2BPPV1, EXTERNAL_NONE, TYPE_NONE},          //FORMAT_RGB_PVRTC1_8X8_SRGB_BLOCK32,
  {INTERNAL_RGB_PVRTC_2BPPV1, EXTERNAL_NONE, TYPE_NONE},         //FORMAT_RGB_PVRTC1_16X8_UNORM_BLOCK32,
  {INTERNAL_SRGB_PVRTC_4BPPV1, EXTERNAL_NONE, TYPE_NONE},          //FORMAT_RGB_PVRTC1_16X8_SRGB_BLOCK32,
  {INTERNAL_RGBA_PVRTC_4BPPV1, EXTERNAL_NONE, TYPE_NONE},          //FORMAT_RGBA_PVRTC1_8X8_UNORM_BLOCK32,
  {INTERNAL_SRGB_ALPHA_PVRTC_2BPPV1, EXTERNAL_NONE, TYPE_NONE},      //FORMAT_RGBA_PVRTC1_8X8_SRGB_BLOCK32,
  {INTERNAL_RGBA_PVRTC_2BPPV1, EXTERNAL_NONE, TYPE_NONE},          //FORMAT_RGBA_PVRTC1_16X8_UNORM_BLOCK32,
  {INTERNAL_SRGB_ALPHA_PVRTC_4BPPV1, EXTERNAL_NONE, TYPE_NONE},      //FORMAT_RGBA_PVRTC1_16X8_SRGB_BLOCK32,
  {INTERNAL_RGBA_PVRTC_4BPPV2, EXTERNAL_NONE, TYPE_NONE},          //FORMAT_RGBA_PVRTC2_4X4_UNORM_BLOCK8,
  {INTERNAL_SRGB_ALPHA_PVRTC_4BPPV2, EXTERNAL_NONE, TYPE_NONE},      //FORMAT_RGBA_PVRTC2_4X4_SRGB_BLOCK8,
  {INTERNAL_RGBA_PVRTC_2BPPV2, EXTERNAL_NONE, TYPE_NONE},          //FORMAT_RGBA_PVRTC2_8X4_UNORM_BLOCK8,
  {INTERNAL_SRGB_ALPHA_PVRTC_2BPPV2, EXTERNAL_NONE, TYPE_NONE},      //FORMAT_RGBA_PVRTC2_8X4_SRGB_BLOCK8,

  {INTERNAL_RGB_ETC, EXTERNAL_NONE, TYPE_NONE},              //FORMAT_RGB_ETC_UNORM_BLOCK8,
  {INTERNAL_ATC_RGB, EXTERNAL_NONE, TYPE_NONE},              //FORMAT_RGB_ATC_UNORM_BLOCK8,
  {INTERNAL_ATC_RGBA_EXPLICIT_ALPHA, EXTERNAL_NONE, TYPE_NONE},      //FORMAT_RGBA_ATCA_UNORM_BLOCK16,
  {INTERNAL_ATC_RGBA_INTERPOLATED_ALPHA, EXTERNAL_NONE, TYPE_NONE}    //FORMAT_RGBA_ATCI_UNORM_BLOCK16
};
}
namespace imgpp { namespace gl {
TextureFormat Find(InternalFormat internal, ExternalFormat external, TypeFormat type) {
  // translate
  InternalFormat translated_internal = TranslateFromES20(internal);
  ExternalFormat translated_external = TranslateFromES20(external);
  TypeFormat translated_type = TranslateFromES20(type);
  for (uint16_t format_id = 0; format_id < 142; ++format_id) {
    const FormatDesc &desc = DESCS[format_id];
    if (desc.internal == translated_internal &&
      desc.external == translated_external &&
      desc.type == translated_type) {
      return static_cast<TextureFormat>(format_id + (uint16_t)FORMAT_FIRST);
    }
  }
  return FORMAT_UNDEFINED;
}

FormatDesc Translate(TextureFormat format, Profile profile) {
  FormatDesc desc = DESCS[(int)(format - FORMAT_FIRST)];
  if (profile == ES20) {
    desc.internal = TranslateToES20(desc.internal);
    desc.external = TranslateToES20(desc.external);
    desc.type = TranslateToES20(desc.type);
  }
  return desc;
}

FormatDesc Translate(TextureFormat format) {
  return Translate(format, GL33);
}

}}
